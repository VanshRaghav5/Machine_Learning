# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jrU-FZnPV-3aYxjcpAHY1SfpJzeb-UOz
"""

import pandas as pd
import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
num_data_points = 500
dates = pd.date_range(start='2023-01-01', periods=num_data_points)
product_ids = np.random.randint(1, 100, num_data_points)
warehouse_ids = np.random.choice(['A', 'B', 'C'], num_data_points)
quantity_received = np.random.randint(10, 100, num_data_points)
quantity_shipped = np.random.randint(5, 50, num_data_points)
inventory_level = np.random.randint(20, 150, num_data_points)
transportation_cost = np.random.uniform(10, 50, num_data_points)

df_random = pd.DataFrame({
    'Date': dates,
    'Product_ID': product_ids,
    'Warehouse_ID': warehouse_ids,
    'Quantity_Received': quantity_received,
    'Quantity_Shipped': quantity_shipped,
    'Inventory_Level': inventory_level,
    'Transportation_Cost': transportation_cost
})


missing_indices = np.random.choice(num_data_points, size=int(num_data_points * 0.1), replace=False)
df_random.loc[missing_indices, 'Inventory_Level'] = np.nan


outlier_indices_received = np.random.choice(num_data_points, size=int(num_data_points * 0.05), replace=False) # 5% outliers
outlier_indices_shipped = np.random.choice(num_data_points, size=int(num_data_points * 0.05), replace=False) # 5% outliers

df_random.loc[outlier_indices_received, 'Quantity_Received'] = np.random.randint(500, 1000, len(outlier_indices_received))
df_random.loc[outlier_indices_shipped, 'Quantity_Shipped'] = np.random.randint(200, 500, len(outlier_indices_shipped))
df_random.to_csv('random_data1.csv', index=False)

# Handling Missing values
df_random['Inventory_Level'].fillna(df_random['Inventory_Level'].mean(), inplace=True)

#Handling Outliers
Q1 = df_random[['Quantity_Received', 'Quantity_Shipped']].quantile(0.25)
Q3 = df_random[['Quantity_Received', 'Quantity_Shipped']].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df_random['Quantity_Received'] = np.clip(df_random['Quantity_Received'], lower_bound['Quantity_Received'], upper_bound['Quantity_Received'])
df_random['Quantity_Shipped'] = np.clip(df_random['Quantity_Shipped'], lower_bound['Quantity_Shipped'], upper_bound['Quantity_Shipped'])

#Converting Day of the week and month
df_random['Date'] = pd.to_datetime(df_random['Date'])
df_random['Day_of_Week'] = df_random['Date'].dt.dayofweek
df_random['Month'] = df_random['Date'].dt.month

#Dropping columns which is not needed
df_random.drop('Warehouse_ID', axis=1, inplace=True)

#Using NumPy and Pandas to calculate key metrics such as average inventory holding cost and transportation cost
df_random['Inventory_Holding_Cost'] = df_random['Quantity_Received'] * df_random['Inventory_Level']

#Optimization Model
from scipy.optimize import linprog
df_random = pd.read_csv('random_data1.csv')
num_warehouses = 3
num_customers = 5
decision_variables = (num_warehouses * num_customers)
cost_matrix = np.random.rand(num_warehouses, num_customers) * 10
objective_function = cost_matrix.flatten()
inventory_constraints = []
for i in range(num_warehouses):
    constraint = np.zeros(decision_variables)
    constraint[i * num_customers : (i + 1) * num_customers] = 1
    inventory_constraints.append((-constraint, df_random.loc[df_random['Warehouse_ID'] == chr(ord('A') + i), 'Inventory_Level'].sum()))
demand = np.random.randint(50, 150, num_customers)
demand_constraints = []
for j in range(num_customers):
    constraint = np.zeros(decision_variables)
    for i in range(num_warehouses):
        constraint[i * num_customers + j] = -1
    demand_constraints.append((constraint, -demand[j]))
constraints = inventory_constraints + demand_constraints
result = linprog(c=objective_function, A_ub=[c[0] for c in constraints], b_ub=[c[1] for c in constraints])
print("Optimal shipping quantities:")
print(result.x.reshape(num_warehouses, num_customers))
print("Total transportation cost:", result.fun)

#Graphical representation
optimal_shipping = result.x.reshape(num_warehouses, num_customers)
plt.figure(figsize=(10, 6))
for i in range(num_warehouses):
    plt.bar(np.arange(num_customers) + i * 0.2, optimal_shipping[i], width=0.2, label=f"Warehouse {chr(ord('A') + i)}")
plt.xlabel("Customer")
plt.ylabel("Quantity Shipped")
plt.title("Optimal Shipping Quantities from Warehouses to Customers")
plt.xticks(np.arange(num_customers) + 0.2, [f"Customer {j+1}" for j in range(num_customers)])
plt.legend()
plt.show()
plt.figure(figsize=(10, 6))
plt.plot(np.arange(num_warehouses), [df_random.loc[df_random['Warehouse_ID'] == chr(ord('A') + i), 'Inventory_Level'].sum() for i in range(num_warehouses)], marker='o', label="Inventory Level")
plt.axhline(y=result.fun, color='r', linestyle='--', label="Total Transportation Cost")
plt.xlabel("Warehouse")
plt.ylabel("Value")
plt.title("Inventory Levels and Total Transportation Cost")
plt.xticks(np.arange(num_warehouses), [f"Warehouse {chr(ord('A') + i)}" for i in range(num_warehouses)])
plt.legend()
plt.show()
df_random.to_csv('random_data1.csv', index=False)

#Handling Outliers
Q1 = df_random[['Quantity_Received', 'Quantity_Shipped']].quantile(0.25)
Q3 = df_random[['Quantity_Received', 'Quantity_Shipped']].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df_random['Quantity_Received'] = np.clip(df_random['Quantity_Received'], lower_bound['Quantity_Received'], upper_bound['Quantity_Received'])
df_random['Quantity_Shipped'] = np.clip(df_random['Quantity_Shipped'], lower_bound['Quantity_Shipped'], upper_bound['Quantity_Shipped'])
print(df_random)

#Converting Day of the week and month
df_random['Date'] = pd.to_datetime(df_random['Date'])
df_random['Day_of_Week'] = df_random['Date'].dt.dayofweek
df_random['Month'] = df_random['Date'].dt.month

print(df_random)

#Dropping columns which is not needed
df_random.drop('Warehouse_ID', axis=1, inplace=True)
print(df_random)

#Using NumPy and Pandas to calculate key metrics such as average inventory holding cost and transportation cost
df_random['Inventory_Holding_Cost'] = df_random['Quantity_Received'] * df_random['Inventory_Level']
print(df_random)

from scipy.optimize import linprog
df_random = pd.read_csv('random_data1.csv')
num_warehouses = 3
num_customers = 5
decision_variables = (num_warehouses * num_customers)
cost_matrix = np.random.rand(num_warehouses, num_customers) * 10
objective_function = cost_matrix.flatten()
inventory_constraints = []
for i in range(num_warehouses):
    constraint = np.zeros(decision_variables)
    constraint[i * num_customers : (i + 1) * num_customers] = 1
    inventory_constraints.append((-constraint, df_random.loc[df_random['Warehouse_ID'] == chr(ord('A') + i), 'Inventory_Level'].sum()))
demand = np.random.randint(50, 150, num_customers)
demand_constraints = []
for j in range(num_customers):
    constraint = np.zeros(decision_variables)
    for i in range(num_warehouses):
        constraint[i * num_customers + j] = -1
    demand_constraints.append((constraint, -demand[j]))
constraints = inventory_constraints + demand_constraints
result = linprog(c=objective_function, A_ub=[c[0] for c in constraints], b_ub=[c[1] for c in constraints])
print("Optimal shipping quantities:")
print(result.x.reshape(num_warehouses, num_customers))
print("Total transportation cost:", result.fun)

import pandas as pd
import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
optimal_shipping = result.x.reshape(num_warehouses, num_customers)
plt.figure(figsize=(10, 6))
for i in range(num_warehouses):
    plt.bar(np.arange(num_customers) + i * 0.2, optimal_shipping[i], width=0.2, label=f"Warehouse {chr(ord('A') + i)}")
plt.xlabel("Customer")
plt.ylabel("Quantity Shipped")
plt.title("Optimal Shipping Quantities from Warehouses to Customers")
plt.xticks(np.arange(num_customers) + 0.2, [f"Customer {j+1}" for j in range(num_customers)])
plt.legend()
plt.show()
plt.figure(figsize=(10, 6))
plt.plot(np.arange(num_warehouses), [df_random.loc[df_random['Warehouse_ID'] == chr(ord('A') + i), 'Inventory_Level'].sum() for i in range(num_warehouses)], marker='o', label="Inventory Level")
plt.axhline(y=result.fun, color='r', linestyle='--', label="Total Transportation Cost")
plt.xlabel("Warehouse")
plt.ylabel("Value")
plt.title("Inventory Levels and Total Transportation Cost")
plt.xticks(np.arange(num_warehouses), [f"Warehouse {chr(ord('A') + i)}" for i in range(num_warehouses)])
plt.legend()
plt.show()
